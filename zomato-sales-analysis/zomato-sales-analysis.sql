-- Using the zomaodb Database
USE zomatodb;

-- 1. List the top 3 customers who have placed the highest number of orders.

SELECT c.customer_id, c.customer_name, COUNT(od.order_id) AS total_orders
FROM order_detail od
JOIN customer c on c.customer_id = od.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY total_orders DESC
LIMIT 3;


-- 2. Find the restaurant that has received the highest average rating

SELECT restaurant_id, restaurant_name, rlocation, ROUND(AVG(rrating),2) AS avg_rating 
FROM restaurant
GROUP BY restaurant_id, restaurant_name, rlocation
ORDER BY avg_rating DESC
LIMIT 1;


-- 3. List all orders from order_detail that were delivered in under 30 minutes.

SELECT *, TIMESTAMPDIFF(MINUTE, order_time, delivered_time) AS delivery_time_in_minutes
FROM order_detail
WHERE TIMESTAMPDIFF(MINUTE, order_time, delivered_time) < 30;


-- 4. Calculate the total revenue generated by each food item. Display food_id, food_name
-- and Total revenue ordered by total revenue in descending order.

SELECT f.food_id, f.food_name, SUM(o.quantity * f.price_per_unit) AS total_revenue
FROM order_food o
JOIN foods f ON f.food_id = o.food_id
GROUP BY f.food_id, f.food_name
ORDER BY total_revenue DESC;


-- 5. Find the second highest revenue-generating restaurant.

SELECT r.restaurant_id, r.restaurant_name, sum(f.price_per_unit * o.quantity) AS total_revenue
FROM order_food o
JOIN foods f ON f.food_id = o.food_id
JOIN restaurant r ON r.restaurant_id = o.restaurant_id
GROUP BY r.restaurant_id, r.restaurant_name
ORDER BY total_revenue DESC
LIMIT 1 OFFSET 1;


-- 6. Find the 5 most popular food items based on the quantity sold.

SELECT f.food_id, f.food_name, SUM(quantity) AS Quantity_Sold
FROM order_food o
JOIN foods f ON f.food_id = o.food_id
GROUP BY f.food_id
ORDER BY Quantity_Sold DESC
LIMIT 5;


-- 7. List the top 3 Zomato employees with the highest average delivery ratings.

SELECT employee_id, (employee_avg_rating) AS average_delivery_rating
FROM zomato_employee
ORDER BY average_delivery_rating DESC
LIMIT 3;


-- 8. Determine the month with the highest number of total orders placed.

SELECT YEAR(order_time) AS order_year, MONTH(order_time) AS order_month, COUNT(order_id) AS total_orders
FROM order_detail
GROUP BY order_year, order_month
ORDER BY total_orders DESC
LIMIT 1;


-- 9. Calculate the average order amount for each customer. Order by average order amount in descending order.

SELECT customer_id, ROUND(AVG(total_amount), 2) AS average_order_amount
FROM (
		SELECT odf.order_id, odf.customer_id, 
		SUM(odf.quantity * f.price_per_unit) AS total_amount
		FROM order_food odf
		JOIN foods f ON odf.food_id = f.food_id
		GROUP BY odf.order_id, odf.customer_id
) AS order_totals
GROUP BY customer_id
ORDER BY average_order_amount DESC;


-- 10. Identify the most frequent customer for each restaurant.

WITH customer_orders AS (
    SELECT restaurant_id, customer_id, COUNT(order_id) AS total_orders,
           RANK() OVER (PARTITION BY restaurant_id ORDER BY COUNT(order_id) DESC) AS rank_order
    FROM order_detail
    GROUP BY restaurant_id, customer_id
)
SELECT restaurant_id, customer_id, total_orders
FROM customer_orders
WHERE rank_order = 1;


-- 11. Calculate the total number of orders placed on weekends.

SELECT COUNT(order_id) 
FROM order_detail
WHERE WEEKDAY(order_time) IN (5,6);


-- 12. Calculate the average delivery time (in minutes) for orders placed on weekdays versus weekends.

SELECT (CASE
			WHEN WEEKDAY(order_time) IN (5,6) THEN 'WEEKEND'
            ELSE 'WEEKDAYS'
		END) AS day_type,
        AVG(TIMESTAMPDIFF(MINUTE, order_time, delivered_time)) AS average_delivery_time
FROM order_detail
GROUP BY day_type;


-- 13. List the top 5 most expensive food items. Display food_id, food_name, and
-- price_per_unit for all food items with the highest 5 prices.

WITH rankedFood AS (
	SELECT food_id, food_name, price_per_unit,
					RANK() OVER (ORDER BY price_per_unit DESC) AS ranking
    FROM foods
)
SELECT food_id, food_name, price_per_unit
FROM rankedFood
WHERE ranking <=5;

-- 14. Find the restaurant with the most diverse menu (i.e., the highest number of food items).

SELECT o.restaurant_id, r.restaurant_name, r.rlocation, r.rrating, COUNT(DISTINCT o.food_id) AS menu_count
FROM order_food o
JOIN restaurant r ON r.restaurant_id = o.restaurant_id
GROUP BY o.restaurant_id
ORDER BY menu_count DESC
LIMIT 1;


-- 15. Calculate total payment amount for each payment type.

SELECT pt.payment_type, 
	   COUNT(DISTINCT pt.transaction_id) AS total_transactions, 
       SUM(o.quantity * f.price_per_unit) AS total_payment
FROM order_food o
JOIN foods f ON f.food_id = o.food_id
JOIN payment_table pt ON pt.order_id = o.order_id
GROUP BY pt.payment_type;

